{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomImage","mimeType","this","split","Image","fileToImageURL","file","Promise","resolve","reject","image","type","onload","onerror","Error","src","URL","createObjectURL","A4_PAPER_DIMENSIONS","A4_PAPER_RATIO","generatePdfFromImages","images","doc","jsPDF","deletePage","forEach","imageDimensions","dimensions","width","height","imageRatio","imageScaleFactor","scaledImageHeight","imageDimensionsOnA4","addPage","addImage","imageType","pdfURL","output","window","open","App","React","useState","uploadedImages","setUploadedImages","handleImageUpload","useCallback","event","fileList","target","files","fileToImagePromises","Array","from","map","all","then","cleanUpUploadedImages","revokeObjectURL","handleGeneratePdfFromImages","className","length","htmlFor","id","accept","onChange","style","display","multiple","onClick","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAMMA,E,kDACJ,WAAmBC,GAAmB,IAAD,8BACnC,gBADiBA,WAAkB,E,2CAKrC,WACE,OAAOC,KAAKD,SAASE,MAAM,KAAK,O,eAPVC,QAYpBC,EAAiB,SAACC,GACtB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAQ,IAAIV,EAAYM,EAAKK,MAEnCD,EAAME,OAAS,WACbJ,EAAQE,IAGVA,EAAMG,QAAU,WACdJ,EAAO,IAAIK,MAAM,qCAGnBJ,EAAMK,IAAMC,IAAIC,gBAAgBX,OAK9BY,EACG,IADHA,EAEI,IAGJC,EAAiBD,EAA4BA,EA4C7CE,EAAwB,SAACC,GAE7B,IAAMC,EAAM,IAAIC,IAIhBD,EAAIE,WAAW,GAEfH,EAAOI,SAAQ,SAACf,GACd,IAAMgB,EA5CkB,SAACC,GAI3B,GAHyBA,EAAWC,OAASD,EAAWE,OAItD,MAAO,CACLD,MAAOV,EACPW,OACEX,GAA6BS,EAAWC,MAAQD,EAAWE,SAMjE,IAAMC,EAAaH,EAAWC,MAAQD,EAAWE,OACjD,GAAIC,EAAaX,EAAgB,CAC/B,IAAMY,EACHZ,EAAiBQ,EAAWE,OAAUF,EAAWC,MAE9CI,EAAoBd,EAA6Ba,EAEvD,MAAO,CACLF,OAAQG,EACRJ,MAAOI,EAAoBF,GAK/B,MAAO,CACLF,MAAOV,GAA8BS,EAAWE,OAASF,EAAWC,OACpEC,OAAQX,GAcgBe,CAAoB,CAC1CL,MAAOlB,EAAMkB,MACbC,OAAQnB,EAAMmB,SAGhBP,EAAIY,UACJZ,EAAIa,SACFzB,EAAMK,IACNL,EAAM0B,WAELlB,EAA4BQ,EAAgBE,OAAS,GACrDV,EAA6BQ,EAAgBG,QAAU,EACxDH,EAAgBE,MAChBF,EAAgBG,WAKpB,IAAMQ,EAASf,EAAIgB,OAAO,WAC1BC,OAAOC,KAAKH,EAAe,WAkFdI,MA/Ef,WAAe,MAE+BC,IAAMC,SAAwB,IAF7D,mBAENC,EAFM,KAEUC,EAFV,KAIPC,EAAoBJ,IAAMK,aAG9B,SAACC,GAGC,IAAMC,EAAWD,EAAME,OAAOC,MAIxBC,GAHYH,EAAWI,MAAMC,KAAKL,GAAY,IAGdM,IAAIlD,GAC1CE,QAAQiD,IAAIJ,GAAqBK,KAAKZ,KAExC,CAACA,IAGGa,EAAwBhB,IAAMK,aAAY,WAC9CF,EAAkB,IAClBD,EAAenB,SAAQ,SAACf,GAItBM,IAAI2C,gBAAgBjD,EAAMK,UAE3B,CAAC8B,EAAmBD,IAEjBgB,EAA8BlB,IAAMK,aAAY,WACpD3B,EAAsBwB,GACtBc,MACC,CAACd,EAAgBc,IAEpB,OACE,qCACE,sKACH,yhBAEG,qBAAKG,UAAU,mBAAf,SACGjB,EAAekB,OAAS,EACvBlB,EAAeW,KAAI,SAAC7C,GAAD,OACjB,qBAAqBK,IAAKL,EAAMK,IAAK8C,UAAU,kBAArCnD,EAAMK,QAGlB,+KAKJ,sBAAK8C,UAAU,oBAAf,UAEE,wBAAOE,QAAQ,aAAf,UACE,sBAAMF,UAAU,SAAhB,oEACA,uBACEG,GAAG,aACHrD,KAAK,OACLsD,OAAO,UACPC,SAAUpB,EAEVqB,MAAO,CAAEC,QAAS,QAClBC,UAAQ,OAKZ,wBACEC,QAASV,EACTC,UAAU,SACVU,SAAoC,IAA1B3B,EAAekB,OAH3B,2ECxKOU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cf1b2e91.chunk.js","sourcesContent":["import React, { ChangeEventHandler } from \"react\";\nimport jsPDF from \"jspdf\";\n\nimport \"./App.css\";\n\n// New class with additional fields for Image\nclass CustomImage extends Image {\n  constructor(public mimeType: string) {\n    super();\n  }\n\n  // `imageType` is a required input for generating a PDF for an image.\n  get imageType(): string {\n    return this.mimeType.split(\"/\")[1];\n  }\n}\n\n// Each image is loaded and an object URL is created.\nconst fileToImageURL = (file: File): Promise<CustomImage> => {\n  return new Promise((resolve, reject) => {\n    const image = new CustomImage(file.type);\n\n    image.onload = () => {\n      resolve(image);\n    };\n\n    image.onerror = () => {\n      reject(new Error(\"Failed to convert File to Image\"));\n    };\n\n    image.src = URL.createObjectURL(file);\n  });\n};\n\n// The dimensions are in millimeters.\nconst A4_PAPER_DIMENSIONS = {\n  width: 210,\n  height: 297,\n};\n\nconst A4_PAPER_RATIO = A4_PAPER_DIMENSIONS.width / A4_PAPER_DIMENSIONS.height;\n\ninterface ImageDimension {\n  width: number;\n  height: number;\n}\n\n// Calculates the best possible position of an image on the A4 paper format,\n// so that the maximal area of A4 is used and the image ratio is preserved.\nconst imageDimensionsOnA4 = (dimensions: ImageDimension) => {\n  const isLandscapeImage = dimensions.width >= dimensions.height;\n\n  // If the image is in landscape, the full width of A4 is used.\n  if (isLandscapeImage) {\n    return {\n      width: A4_PAPER_DIMENSIONS.width,\n      height:\n        A4_PAPER_DIMENSIONS.width / (dimensions.width / dimensions.height),\n    };\n  }\n\n  // If the image is in portrait and the full height of A4 would skew\n  // the image ratio, we scale the image dimensions.\n  const imageRatio = dimensions.width / dimensions.height;\n  if (imageRatio > A4_PAPER_RATIO) {\n    const imageScaleFactor =\n      (A4_PAPER_RATIO * dimensions.height) / dimensions.width;\n\n    const scaledImageHeight = A4_PAPER_DIMENSIONS.height * imageScaleFactor;\n\n    return {\n      height: scaledImageHeight,\n      width: scaledImageHeight * imageRatio,\n    };\n  }\n\n  // The full height of A4 can be used without skewing the image ratio.\n  return {\n    width: A4_PAPER_DIMENSIONS.height / (dimensions.height / dimensions.width),\n    height: A4_PAPER_DIMENSIONS.height,\n  };\n};\n\n// Creates a PDF document containing all the uploaded images.\nconst generatePdfFromImages = (images: CustomImage[]) => {\n  // Default export is A4 paper, portrait, using millimeters for units.\n  const doc = new jsPDF();\n\n  // We let the images add all pages,\n  // therefore the first default page can be removed.\n  doc.deletePage(1);\n\n  images.forEach((image) => {\n    const imageDimensions = imageDimensionsOnA4({\n      width: image.width,\n      height: image.height,\n    });\n\n    doc.addPage();\n    doc.addImage(\n      image.src,\n      image.imageType,\n      // Images are vertically and horizontally centered on the page.\n      (A4_PAPER_DIMENSIONS.width - imageDimensions.width) / 2,\n      (A4_PAPER_DIMENSIONS.height - imageDimensions.height) / 2,\n      imageDimensions.width,\n      imageDimensions.height\n    );\n  });\n\n  // Creates a PDF and opens it in a new browser tab.\n  const pdfURL = doc.output(\"bloburl\");\n  window.open(pdfURL as any, \"_blank\");\n};\n\nfunction App() {\n  // State for uploaded images\n  const [uploadedImages, setUploadedImages] = React.useState<CustomImage[]>([]);\n\n  const handleImageUpload = React.useCallback<\n    ChangeEventHandler<HTMLInputElement>\n  >(\n    (event) => {\n      // `event.target.files` is of type `FileList`,\n      // we convert it to Array for easier manipulation.\n      const fileList = event.target.files;\n      const fileArray = fileList ? Array.from(fileList) : [];\n\n      // Uploaded images are read and the app state is updated.\n      const fileToImagePromises = fileArray.map(fileToImageURL);\n      Promise.all(fileToImagePromises).then(setUploadedImages);\n    },\n    [setUploadedImages]\n  );\n\n  const cleanUpUploadedImages = React.useCallback(() => {\n    setUploadedImages([]);\n    uploadedImages.forEach((image) => {\n      // The URL.revokeObjectURL() releases an existing object URL\n      // which was previously created by URL.createObjectURL().\n      // It lets the browser know not to keep the reference to the file any longer.\n      URL.revokeObjectURL(image.src);\n    });\n  }, [setUploadedImages, uploadedImages]);\n\n  const handleGeneratePdfFromImages = React.useCallback(() => {\n    generatePdfFromImages(uploadedImages);\n    cleanUpUploadedImages();\n  }, [uploadedImages, cleanUpUploadedImages]);\n\n  return (\n    <>\n      <h1>Сохранить изображения в PDF</h1>\n\t  <p>Ваши фото (сканы) никуда не отсылаются, они обрабатываются на Вашем компьютере (телефоне, планшете)</p>\n      {/* Overview of uploaded images */}\n      <div className=\"images-container\">\n        {uploadedImages.length > 0 ? (\n          uploadedImages.map((image) => (\n            <img key={image.src} src={image.src} className=\"uploaded-image\" />\n          ))\n        ) : (\n          <p>Загрузите свои фото (сканы)...</p>\n        )}\n      </div>\n\n      {/* Buttons for uploading images and generating a PDF */}\n      <div className=\"buttons-container\">\n        {/* Uploads images */}\n        <label htmlFor=\"file-input\">\n          <span className=\"button\">Загрузить</span>\n          <input\n            id=\"file-input\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleImageUpload}\n            // Native file input is hidden only for styling purposes\n            style={{ display: \"none\" }}\n            multiple\n          />\n        </label>\n\n        {/* Generates PDF */}\n        <button\n          onClick={handleGeneratePdfFromImages}\n          className=\"button\"\n          disabled={uploadedImages.length === 0}\n        >\n          Сохранить\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}